{"version":3,"sources":["image/login1.jpg","Main/Main.js","Info/Info.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Main","state","pn","input1","e","_this","setState","target","value","clear","react_default","a","createElement","className","src","logo","alt","type","id","name","readOnly","this","onClick","Component","Info","App","reactSwipeEl","lib_default","swipeOptions","startSlide","continuous","disableScroll","callback","console","log","transitionEnd","ref","el","src_Info_Info","src_Main_Main","next","prev","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30a26140.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/login1.273d4d67.jpg\";","import React, { Component } from 'react';\r\nimport logo from '../image/login1.jpg';\r\nimport './Main.css';\r\n\r\nclass Main extends Component {\r\n\r\nstate = {\r\n    pn: ''\r\n}\r\n\r\ninput1 = (e) => {\r\n  this.setState({\r\n    pn: this.state.pn + e.target.value\r\n  })\r\n}\r\n\r\nclear = (e) => {\r\n  this.setState({\r\n    pn: \"\"\r\n  })\r\n}\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"View1\">\r\n          <img src={logo} className=\"App-logo\" alt=\"login1\" />\r\n        </div>\r\n        <div className=\"View2\">\r\n          <input\r\n            type=\"number\"\r\n            id=\"phonenum\"\r\n            name=\"phonenum\"\r\n            readOnly value={this.state.pn}/>\r\n          <button className=\"button1\" onClick={this.input1}>Admin</button>\r\n          <button className=\"button1\" onClick={this.input1}>Start</button>\r\n        </div>\r\n        <div className=\"View3\">\r\n          <button className=\"button2\" value=\"7\" onClick={this.input1}>7</button>\r\n          <button className=\"button2\" value=\"8\" onClick={this.input1}>8</button>\r\n          <button className=\"button2\" value=\"9\" onClick={this.input1}>9</button>\r\n          <button className=\"button2\" value=\"4\" onClick={this.input1}>4</button>\r\n          <button className=\"button2\" value=\"5\" onClick={this.input1}>5</button>\r\n          <button className=\"button2\" value=\"6\" onClick={this.input1}>6</button>\r\n          <button className=\"button2\" value=\"1\" onClick={this.input1}>1</button>\r\n          <button className=\"button2\" value=\"2\" onClick={this.input1}>2</button>\r\n          <button className=\"button2\" value=\"3\" onClick={this.input1}>3</button>\r\n          <button className=\"button2\" value=\"\" onClick={this.clear}>clear</button>\r\n          <button className=\"button2\" value=\"0\" onClick={this.input1}>0</button>\r\n          <button className=\"button2\" value=\"\" onClick={this.clear}>Enter</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from 'react';\r\nimport './Info.css';\r\n\r\nclass Info extends Component {\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n    <div className=\"info\">\r\n      <div className=\"infoView1\">\r\n      </div>\r\n      <div className=\"infoView2\">\r\n      </div>\r\n        <div className=\"infoView3\">\r\n        </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Info;\r\n","import React, { Component } from 'react';\nimport ReactSwipe from 'react-swipe';\nimport './App.css';\n\nimport Main from'./Main/Main.js';\nimport Info from'./Info/Info.js';\n\n\n\nclass App extends Component {\n\n  render() {\n    let reactSwipeEl;\n\n    return (\n      <div className=\"swipe-wrap\">\n        <ReactSwipe\n          swipeOptions={{\n            startSlide: 1,\n            continuous: false,\n            disableScroll: false,\n            callback() {\n              console.log('slide changed');\n            },\n            transitionEnd() {\n              console.log('ended transition');\n            }\n           }}\n          ref={el => (reactSwipeEl = el)}\n        >\n          <div><Info /></div>\n          <div><Main /></div>\n        </ReactSwipe>\n      <button onClick={() => reactSwipeEl.next()}>Next</button>\n      <button onClick={() => reactSwipeEl.prev()}>Previous</button>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}